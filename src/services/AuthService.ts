export interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: 'user' | 'admin';
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface SignupData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export interface AuthResponse {
  success: boolean;
  user?: User;
  token?: string;
  error?: string;
}

/**
 * Service that handles authentication-related functionality
 */
class AuthService {
  /**
   * Attempts to log in a user with provided credentials
   */
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      // In a real application, this would make an API call to authenticate
      console.log('Logging in with:', credentials);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // This is a demo implementation
      if (credentials.email === 'demo@example.com' && credentials.password === 'password123') {
        const user: User = {
          id: '1',
          firstName: 'Demo',
          lastName: 'User',
          email: credentials.email,
          role: 'user',
        };
        
        return {
          success: true,
          user,
          token: 'demo-jwt-token',
        };
      }
      
      return {
        success: false,
        error: 'Invalid email or password.',
      };
    } catch (error) {
      console.error('Login error:', error);
      return {
        success: false,
        error: 'An error occurred during login.',
      };
    }
  }
  
  /**
   * Registers a new user
   */
  async signup(data: SignupData): Promise<AuthResponse> {
    try {
      // In a real application, this would make an API call to create an account
      console.log('Signing up with:', data);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // This is a demo implementation
      const user: User = {
        id: '2', // Would be generated by the server
        firstName: data.firstName,
        lastName: data.lastName,
        email: data.email,
        role: 'user',
      };
      
      return {
        success: true,
        user,
        token: 'demo-jwt-token',
      };
    } catch (error) {
      console.error('Signup error:', error);
      return {
        success: false,
        error: 'An error occurred during signup.',
      };
    }
  }
  
  /**
   * Logs out the current user
   */
  async logout(): Promise<boolean> {
    try {
      // In a real application, this would make an API call to invalidate the token
      // and clear any server-side sessions
      
      // Clear local storage or cookies
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user');
      
      return true;
    } catch (error) {
      console.error('Logout error:', error);
      return false;
    }
  }
  
  /**
   * Checks if a user is currently authenticated
   */
  isAuthenticated(): boolean {
    const token = localStorage.getItem('auth_token');
    return !!token;
  }
  
  /**
   * Gets the current authenticated user
   */
  getCurrentUser(): User | null {
    const userJson = localStorage.getItem('user');
    if (!userJson) return null;
    
    try {
      return JSON.parse(userJson) as User;
    } catch {
      return null;
    }
  }
  
  /**
   * Saves authentication data to storage
   */
  saveAuthData(user: User, token: string): void {
    localStorage.setItem('auth_token', token);
    localStorage.setItem('user', JSON.stringify(user));
  }
}

// Export as a singleton instance
export default new AuthService(); 